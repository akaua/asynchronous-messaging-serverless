{
  "Comment": "StateMachine for Processing Fare Payments",
  "StartAt": "RegisterFare",
  "States": {
    "RegisterFare": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${FareProcessingTable}",
        "Item.$": "$"
      },
      "TimeoutSeconds": 5,
      "Retry": [
          {
              "ErrorEquals": [
                  "ProvisionedThroughputExceededException",
                  "RequestLimitExceeded",
                  "ServiceUnavailable",
                  "ThrottlingException"
              ],
              "IntervalSeconds": 1,
              "BackoffRate": 2,
              "MaxAttempts": 2
          }
      ],
      "Catch": [
          {
              "ErrorEquals": [
                  "States.ALL"
              ],
              "ResultPath": "$.registerError",
              "Next": "NotifyFailure"
          }
      ],
      "ResultPath": "$.dynamodbResult",
      "Next": "ChargeFare"
    },
    "ChargeFare": {
      "Comment": "Add comment...",
      "Type": "Task",
      "Resource": "${PaymentChargeFunctionArn}",
      "Next": "CustomerAccountCredit",
      "Catch": [{
        "ErrorEquals": [
          "PaymentAuthException",
          "PaymentChargeException"
        ],
        "Next": "SetFareStatusFailed",
        "ResultPath": "$.chargeError"
      }]
    },
    "CustomerAccountCredit": {
      "Comment": "Add comment...",
      "Type": "Task",
      "Resource": "${AccountCreditFunctionArn}",
      "Next": "SetFareStatusCompleted",
      "Catch": [{
        "ErrorEquals": ["AccountCreditException"],
        "Next": "RefundFare",
        "ResultPath": "$.creditError"
      }]
    },
    "SetFareStatusCompleted": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${FareProcessingTable}",
        "Key": {
          "fareId": {
            "S.$": "$.fareId"
          }
        },
        "UpdateExpression": "SET fareStatus = :s",
        "ExpressionAttributeValues": {
          ":s": {
            "S": "completed"
          }
        }
      },
      "TimeoutSeconds": 5,
      "Retry": [{
          "ErrorEquals": [
            "ProvisionedThroughputExceededException",
            "RequestLimitExceeded",
            "ServiceUnavailable",
            "ThrottlingException"
          ],
          "IntervalSeconds": 1,
          "BackoffRate": 2,
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.dynamodbResult", 
      "Next": "NotifySuccess"
    },
    "SetFareStatusFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${FareProcessingTable}",
        "Key": {
          "fareId": {
            "S.$": "$.fareId"
          }
        },
        "UpdateExpression": "SET fareStatus = :s",
        "ExpressionAttributeValues": {
          ":s": {
            "S": "failed"
          }
        }
      },
      "TimeoutSeconds": 5,
      "Retry": [{
          "ErrorEquals": [
            "ProvisionedThroughputExceededException",
            "RequestLimitExceeded",
            "ServiceUnavailable",
            "ThrottlingException"
          ],
          "IntervalSeconds": 1,
          "BackoffRate": 2,
          "MaxAttempts": 2
        }
      ],
      "ResultPath": "$.dynamodbResult",
      "Next": "NotifyFailure"
    },
    "NotifySuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Subject": "Transaction Succeeded",
        "Message.$": "$",
        "TopicArn": "${FareProcessingTopicArn}",
        "MessageAttributes": {
          "IsSuccessful": {
            "DataType": "String",
            "StringValue": "true"
          }
        }
      },
      "ResultPath": "$.snsResult",
      "Next": "FareProcessingSucceeded"
    },
    "FareProcessingSucceeded": {
      "Type": "Succeed"
    },
    "RefundFare": {
      "Comment": "Add comment...",
      "Type": "Task",
      "Resource": "${PaymentRefundFunctionArn}",
      "Next": "SetFareStatusFailed"
    },
    "NotifyFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Subject": "Transaction Failed",
        "Message.$": "$",
        "TopicArn": "${FareProcessingTopicArn}",
        "MessageAttributes": {
          "IsSuccessful": {
            "DataType": "String",
            "StringValue": "false"
          }
        }
      },
      "ResultPath": "$.snsResult",
      "Next": "FareProcessingFailed"
    },
    "FareProcessingFailed": {
      "Type": "Fail"
    }
  }
}
